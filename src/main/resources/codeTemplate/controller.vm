package ${controllerUrl};

import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import ${url};
import ${serviceUrl}.${name}Service;
import com.ocean.vo.ResultBean;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import com.github.pagehelper.PageInfo;

@RestController("${capitalName}Controller")
@RequestMapping("/${capitalName}")
@Api(tags="")
public class ${name}Controller {

    public static Logger logger = LoggerFactory.getLogger(${name}Controller.class);

    @Autowired
    private ${name}Service service;

    @GetMapping(value = "/get")
    @ApiOperation(value="")
    public ResultBean<${name}> get(@RequestParam ${primaryType} ${primaryKey}) {
        ${name} entity=service.get${name}(id);
        return ResultBean.success(entity);
    }

    @GetMapping(value = "query")
    @ApiOperation(value="")
    public ResultBean<PageInfo<${name}>> query(
        @RequestParam(defaultValue = "1") Integer pageNum,
        @RequestParam(defaultValue = "10") Integer pageSize,
        @RequestParam(required = false) String param) {
        HashMap<String, Object> paramMap = new HashMap<>();
        if (StringUtils.isEmpty(param)) {
            try {
                paramMap = new ObjectMapper().readValue(param, HashMap.class);
            } catch (IOException e) {
                logger.error(e.getMessage(), e);
            }
        }else{
            paramMap.put("orderBy","id desc");
        }
        PageInfo<${name}> pageInfo = service.query(pageNum, pageSize, paramMap);
        return ResultBean.success(pageInfo);
    }

    @PostMapping(value = "/save")
    @ApiOperation(value="")
    public ResultBean save(@RequestBody ${name} model) {
        ${name} record = new ${name}();
        BeanUtils.copyProperties(model, record);

        if (record.getId() == null) {
            //TODO 设置主键
            service.save(record);
        } else {
            service.update(record);
        }

        return ResultBean.success("保存成功");
    }

    @PostMapping(value = "/delete")
    @ApiOperation(value="")
    public ResultBean del(@RequestParam ${primaryType} ${primaryKey}) {
        service.del(${primaryKey});
        return ResultBean.success("删除成功");
    }

}